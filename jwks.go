package jwks

import (
	"crypto/rsa"
	"errors"
)

const (

	// keyTypeRSA represents a cryptography key generated by an RSA algorithm.
	keyTypeRSA = "RSA"
)

var (

	// ErrKIDNotFound indicates that the given key ID was not found in the JWKS.
	ErrKIDNotFound = errors.New("the given key ID was not found in the JWKS")

	// ErrNotExpectedKeyType indicates that the given public key was not of the expected type.
	ErrNotExpectedKeyType = errors.New("the public key was not of the expected type")
)

// JSONKey represents a raw key inside a JWKS.
type JSONKey struct {
	Exponent string `json:"e"`
	KeyID    string `json:"kid"`
	KeyType  string `json:"kty"`
	Modulus  string `json:"n"`
}

// Keystore represents a JWKS.
type Keystore map[string]JSONKey

// rawKeystore represents a JWKS in JSON format.
type rawKeystore struct {
	Keys []JSONKey `json:"keys"`
}

// RSA retrieves an RSA public key from the JWKS.
func (k Keystore) RSA(kid string) (publicKey *rsa.PublicKey, err error) {

	// Get the JSONKey from the JWKS.
	key, ok := k[kid]
	if !ok {
		return nil, ErrKIDNotFound
	}

	// Confirm the key is an RSA key.
	if key.KeyType != keyTypeRSA {
		return nil, ErrNotExpectedKeyType
	}

	// Transform the key from JSON to an RSA key.
	return key.RSA()
}
